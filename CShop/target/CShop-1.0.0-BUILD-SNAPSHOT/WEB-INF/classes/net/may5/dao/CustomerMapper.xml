<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
   "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="net.may5.dao.CustomerMapper">
   
   <!-- 고객페이지 -->
   	<!-- 가입자 수 -->
	<select id="getAllCustomerCount" resultType="int">
		select count(*) from customer
	</select>
	
	<!-- 주소 검색 -->
	<select id="searchZipInfo" parameterType="Map" resultType="HashMap">
		select distinct sido||' '||sigungu||' '||doromyong||' '||buildingNum1||'-'||buildingNum2 zipKeyword
		from Zip where doromyong like '월드컵로%' order by zipKeyword
	</select>
	<select id="searchZipInfo2" parameterType="String" resultType="net.may5.dto.Zip">
		select A.zipKeyword, B.* from (select doromyong||buildingNum1||'-'||buildingNum2 keyword,
		sido||' '||sigungu||' '||doromyong||' '||buildingNum1||'-'||buildingNum2 zipKeyword,
		zipCode from Zip) A inner join Zip B on A.ZIPCODE = B.zipCode
		where A.keyword like #{zipKeyword}||'%' order by A.zipKeyword
	</select>
	<select id="searchCstZip" parameterType="String" resultType="Zip">
		select A.zipKeyword, B.* from (select doromyong||buildingNum1||'-'||buildingNum2 keyword,
		sido||' '||sigungu||' '||doromyong||' '||buildingNum1||'-'||buildingNum2 zipKeyword, zipCode 
		from Zip) A inner join Zip B on A.ZIPCODE = B.zipCode where B.zipCode=#{zipCode}
	</select>
	
	<!-- ID 중복검사 -->
	<select id="redundancyCheckId" parameterType="String" resultType="Customer">
		select cstId, levelCode from Customer where cstId=#{cstId} and levelCode!='D'
	</select>
	
	
	<!-- 회원가입 -->
	<insert id="insertJoinCst" parameterType="Customer">
		insert into Customer(cstId, cstName, cstPassword, zipCode, cstDetailAddress, cstCP, cstEmail,
        cstGender, cstBirthday, cstEmailAgreement, cstQnAPermission, cstEvaluationPermission, cstJoinDate,
        cstLastVisitDate, cstPostCount, levelCode, cstCode)
         values(#{cstId}, #{cstName}, #{cstPassword}, #{zipCode}, #{cstDetailAddress}, #{cstCP}, #{cstEmail},
          #{cstGender}, #{cstBirthday}, #{cstEmailAgreement}, 'T', 'T', sysdate, sysdate, 0, 'N', CST.nextval)
	</insert>
	
	<!-- 로그인 -->
	<select id="loginCst" resultType="Customer">
		select * from Customer where cstId=#{cstId} and cstPassword=#{cstPassword} and levelCode!='D'	
	</select>
	
	<!-- 회원정보조회-세션 -->
	<select id="loginCstInfo" parameterType="int" resultType="Customer">
		select * from Customer where cstCode=#{cstCode}
	</select>
	
	<!-- 회원정보수정 -->
	<update id="modifyCstInfo" parameterType="Customer">
		update Customer set cstPassword=#{cstPassword}, zipCode=#{zipCode}, 
		cstDetailAddress=#{cstDetailAddress}, cstCP=#{cstCP}, cstEmailAgreement=#{cstEmailAgreement} 
		where cstCode=#{cstCode}
	</update>

	<!-- 회원탈퇴 -->
	<update id="deleteMemberInfo" parameterType="Customer">
		update Customer set levelCode='D', cstPassword='', zipCode='NN000000', 
		cstDetailAddress='', cstCP='', cstEmail='', cstBirthday='' where cstCode=#{cstCode}
	</update>
	
	
  <!-- 관리자페이지 -->
	<!-- 전체고객 정보 조회 -->
	<select id="selectAllCstInfo" resultType="Customer">
		select A.cntr, B.*, C.levelName from (select count(*) cntr from Customer
		where levelCode!='D') A, Customer B inner join cstLevel C on B.levelCode = C.levelCode
	</select>
	
	<!-- Json Test -->
	<select id="getAllCstInfo" parameterType="Map" resultType="HashMap">
		select A.cntr, B.*, C.levelName from (select count(*) cntr from Customer
		where levelCode!='D') A, Customer B inner join cstLevel C on B.levelCode = C.levelCode
	</select>
	
	<!-- 관심고객 정보 조회 -->
	<select id="selectBlackCstInfo" resultType="Customer">
		select * from Customer where levelCode='B'
	</select>
	
	<!-- VIP고객 정보 조회 -->
	<select id="selectVIPCstInfo" resultType="Customer">
		select * from Customer where levelCode='V'
	</select>
	
</mapper>
